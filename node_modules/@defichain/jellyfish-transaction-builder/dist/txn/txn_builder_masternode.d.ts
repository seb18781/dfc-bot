import { BigNumber } from '@defichain/jellyfish-json';
import { CreateMasternode, ResignMasternode, Script, TransactionSegWit, UpdateMasternode } from '@defichain/jellyfish-transaction';
import { P2WPKHTxnBuilder } from './txn_builder';
export declare class TxnBuilderMasternode extends P2WPKHTxnBuilder {
    /**
     * Build create masternode transaction
     *
     * @param {CreateMasternode} createMasternode transaction to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @return {Promise<TransactionSegWit>}
     */
    create(createMasternode: CreateMasternode, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * Build resign masternode transaction
     *
     * @param {ResignMasternode} resignMasternode transaction to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @return {Promise<TransactionSegWit>}
     */
    resign(resignMasternode: ResignMasternode, changeScript: Script): Promise<TransactionSegWit>;
    /**
     * Build update masternode transaction
     *
     * @param {UpdateMasternode} updateMasternode transaction to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @param {Object} [collateral] needed when updating owner address
     * @param {string} collateral.txid collateral txid
     * @param {BigNumber} collateral.value collateral amount
     * @param {Script} collateral.newOwnerScript for new owner address
     * @return {Promise<TransactionSegWit>}
     */
    update(updateMasternode: UpdateMasternode, changeScript: Script, collateral?: {
        txid: string;
        value: BigNumber;
        newOwnerScript: Script;
    }): Promise<TransactionSegWit>;
}
//# sourceMappingURL=txn_builder_masternode.d.ts.map