"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxnBuilderMasternode = void 0;
const jellyfish_json_1 = require("@defichain/jellyfish-json");
const jellyfish_transaction_1 = require("@defichain/jellyfish-transaction");
const txn_builder_1 = require("./txn_builder");
class TxnBuilderMasternode extends txn_builder_1.P2WPKHTxnBuilder {
    /**
     * Build create masternode transaction
     *
     * @param {CreateMasternode} createMasternode transaction to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @return {Promise<TransactionSegWit>}
     */
    create(createMasternode, changeScript) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const creationFee = this.network.name === 'regtest' ? new jellyfish_json_1.BigNumber('1') : new jellyfish_json_1.BigNumber('10');
            // NOTE(canonbrother): adding a force default timelock handling here for better ux as from now on, timelock is mandatory
            // https://github.com/DeFiCh/ain/blob/ff53dcee23db2ffe0da9b147a0a53956f4e7ee31/src/masternodes/mn_checks.h#L159
            createMasternode.timelock = (_a = createMasternode.timelock) !== null && _a !== void 0 ? _a : 0x0000;
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_CREATE_MASTER_NODE(createMasternode), changeScript, creationFee);
        });
    }
    /**
     * Build resign masternode transaction
     *
     * @param {ResignMasternode} resignMasternode transaction to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @return {Promise<TransactionSegWit>}
     */
    resign(resignMasternode, changeScript) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.createDeFiTx(jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_RESIGN_MASTER_NODE(resignMasternode), changeScript);
        });
    }
    /**
     * Build update masternode transaction
     *
     * @param {UpdateMasternode} updateMasternode transaction to create
     * @param {Script} changeScript to send unspent to after deducting the (converted + fees)
     * @param {Object} [collateral] needed when updating owner address
     * @param {string} collateral.txid collateral txid
     * @param {BigNumber} collateral.value collateral amount
     * @param {Script} collateral.newOwnerScript for new owner address
     * @return {Promise<TransactionSegWit>}
     */
    update(updateMasternode, changeScript, collateral) {
        return __awaiter(this, void 0, void 0, function* () {
            const minFee = new jellyfish_json_1.BigNumber(0.001);
            const { prevouts, vin, total } = yield this.collectPrevouts(minFee);
            const deFiOut = {
                value: new jellyfish_json_1.BigNumber(0),
                script: {
                    stack: [
                        jellyfish_transaction_1.OP_CODES.OP_RETURN,
                        jellyfish_transaction_1.OP_CODES.OP_DEFI_TX_UPDATE_MASTER_NODE(updateMasternode)
                    ]
                },
                tokenId: 0x00
            };
            const change = {
                value: total,
                script: changeScript,
                tokenId: 0x00
            };
            const mergedVin = [...vin];
            const mergedVout = [deFiOut, change];
            const mergedPrevouts = [...prevouts];
            if (collateral !== null && collateral !== undefined) {
                const { txid, value, newOwnerScript } = collateral;
                const collateralPrevout = {
                    txid,
                    vout: 1,
                    script: changeScript,
                    value: new jellyfish_json_1.BigNumber(value),
                    tokenId: 0x00
                };
                const collateralVout = {
                    script: newOwnerScript,
                    value: new jellyfish_json_1.BigNumber(value),
                    tokenId: 0x00
                };
                const collateralVin = {
                    txid,
                    index: 1,
                    script: { stack: [] },
                    sequence: 0xffffffff
                };
                mergedVin.push(collateralVin);
                mergedVout.splice(1, 0, collateralVout);
                mergedPrevouts.push(collateralPrevout);
            }
            const txn = {
                version: jellyfish_transaction_1.DeFiTransactionConstants.Version,
                vin: mergedVin,
                vout: mergedVout,
                lockTime: 0x00000000
            };
            const fee = yield this.calculateFee(txn);
            change.value = total.minus(fee);
            return yield this.sign(txn, mergedPrevouts);
        });
    }
}
exports.TxnBuilderMasternode = TxnBuilderMasternode;
//# sourceMappingURL=txn_builder_masternode.js.map