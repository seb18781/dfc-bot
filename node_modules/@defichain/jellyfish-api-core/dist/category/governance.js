"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Governance = exports.MasternodeType = exports.VoteResult = exports.VoteDecision = exports.ListProposalsStatus = exports.ListProposalsType = exports.ProposalStatus = exports.ProposalType = void 0;
var ProposalType;
(function (ProposalType) {
    ProposalType["COMMUNITY_FUND_PROPOSAL"] = "CommunityFundProposal";
    ProposalType["VOTE_OF_CONFIDENCE"] = "VoteOfConfidence";
})(ProposalType = exports.ProposalType || (exports.ProposalType = {}));
var ProposalStatus;
(function (ProposalStatus) {
    ProposalStatus["VOTING"] = "Voting";
    ProposalStatus["REJECTED"] = "Rejected";
    ProposalStatus["COMPLETED"] = "Completed";
})(ProposalStatus = exports.ProposalStatus || (exports.ProposalStatus = {}));
var ListProposalsType;
(function (ListProposalsType) {
    ListProposalsType["CFP"] = "cfp";
    ListProposalsType["VOC"] = "voc";
    ListProposalsType["ALL"] = "all";
})(ListProposalsType = exports.ListProposalsType || (exports.ListProposalsType = {}));
var ListProposalsStatus;
(function (ListProposalsStatus) {
    ListProposalsStatus["VOTING"] = "voting";
    ListProposalsStatus["REJECTED"] = "rejected";
    ListProposalsStatus["COMPLETED"] = "completed";
    ListProposalsStatus["ALL"] = "all";
})(ListProposalsStatus = exports.ListProposalsStatus || (exports.ListProposalsStatus = {}));
var VoteDecision;
(function (VoteDecision) {
    VoteDecision["YES"] = "yes";
    VoteDecision["NO"] = "no";
    VoteDecision["NEUTRAL"] = "neutral";
})(VoteDecision = exports.VoteDecision || (exports.VoteDecision = {}));
var VoteResult;
(function (VoteResult) {
    VoteResult["YES"] = "YES";
    VoteResult["NO"] = "NO";
    VoteResult["NEUTRAL"] = "NEUTRAL";
    VoteResult["UNKNOWN"] = "Unknown";
})(VoteResult = exports.VoteResult || (exports.VoteResult = {}));
var MasternodeType;
(function (MasternodeType) {
    MasternodeType["MINE"] = "mine";
    MasternodeType["ALL"] = "all";
})(MasternodeType = exports.MasternodeType || (exports.MasternodeType = {}));
/**
 * Governance RPCs for DeFi Blockchain
 */
class Governance {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a Community Fund Proposal.
     *
     * @param {CFPData} data Community fund proposal data
     * @param {string} data.title Title of community fund request
     * @param {string} data.context Context of community fund request
     * @param {string} data.contextHash Hash of the content which context field point to of community fund request
     * @param {BigNumber} data.amount Amount per period
     * @param {string} data.payoutAddress Any valid address to receive the funds
     * @param {number} [data.cycles=1] Number of cycles for periodic fund request. Defaults to one cycle.
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} [utxos.txid] The transaction id
     * @param {number} [utxos.vout] The output number
     * @return {Promise<string>} txid
     */
    createGovCfp(data, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const defaultData = {
                cycles: 1
            };
            return yield this.client.call('creategovcfp', [Object.assign(Object.assign({}, defaultData), data), utxos], 'number');
        });
    }
    /**
     * Returns information about the proposal.
     *
     * @param {string} proposalId Proposal id
     * @return {Promise<ProposalInfo>} Information about the proposal
     */
    getGovProposal(proposalId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('getgovproposal', [proposalId], { amount: 'bignumber' });
        });
    }
    /**
     * Creates a Vote of Confidence.
     *
     * @param {VOCData} data Vote of confidence data
     * @param {string} data.title Vote of confidence's title
     * @param {string} data.context Vote of confidence's context
     * @param {string} data.contextHash Hash of the content which context field point to of vote of confidence request
     * @param {boolean} data.emergency Is this emergency VOC
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} [utxos.txid] The transaction id
     * @param {number} [utxos.vout] The output number
     * @return {Promise<string>} txid
     */
    createGovVoc(data, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('creategovvoc', [data, utxos], 'number');
        });
    }
    /**
     * Returns list of proposals.
     *
     * @param {Object} options List proposal filter options
     * @param {ListProposalsType} [options.type=ListProposalsType.ALL] type of proposals
     * @param {ListProposalsStatus} [options.status=ListProposalsStatus.ALL] status of proposals
     * @param {number} [options.cycle=0] cycle: 0 (show all), cycle: N (show cycle N), cycle: -1 (show previous cycle)
     * @param {ListProposalsPagination} [options.pagination]
     * @param {number} [options.pagination.start=0]
     * @param {boolean} [options.pagination.including_start=true] defaults to false if options.pagination.start is set, true otherwise
     * @param {number} [options.pagination.limit=100] to limit number of records
     * @return {Promise<ProposalInfo[]>}
     */
    listGovProposals(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listgovproposals', [options], { amount: 'bignumber' });
        });
    }
    /**
     * Vote on a community proposal.
     *
     * @param {VoteData} data Vote data
     * @param {string} data.proposalId Proposal id
     * @param {number} data.masternodeId Masternode id/owner address/operator address
     * @param {VoteDecision} data.decision Vote decision. See VoteDecision.
     * @param {UTXO[]} [utxos = []] Specific utxos to spend
     * @param {string} [utxos.txid] The transaction id
     * @param {string} [utxos.vout] The output number
     * @return {Promise<string>} txid
     */
    voteGov(data, utxos = []) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('votegov', [data.proposalId, data.masternodeId, data.decision, utxos], 'number');
        });
    }
    /**
     * Returns information about proposal votes.
     *
     * @param {ListGovProposalVotesOptions} options
     * @param {string} options.proposalId Proposal id
     * @param {MasternodeType | string} [options.masternode=MasternodeType.MINE] masternode id or reserved words 'mine' to list votes for all owned accounts or 'all' to list all votes
     * @param {number} [options.cycle=0] cycle: 0 (show current), cycle: N (show cycle N), cycle: -1 (show all)
     * @param {ListGovProposalVotesPagination} [options.pagination]
     * @param {number} [options.pagination.start=0]
     * @param {boolean} [options.pagination.including_start=true] defaults to false if options.pagination.start is set, true otherwise
     * @param {number} [options.pagination.limit=100] to limit number of records
     * @param {boolean} [options.aggregate=false] false: return raw vote data, true: return total votes by type
     * @param {boolean} [options.valid=true] false: show only invalid votes at current height, true: show only valid votes at current height
     * @return {Promise<ListVotesResult[]>} Proposal vote information
     */
    listGovProposalVotes(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('listgovproposalvotes', [options], 'number');
        });
    }
}
exports.Governance = Governance;
//# sourceMappingURL=governance.js.map