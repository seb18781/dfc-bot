import { ApiClient } from '..';
/**
 * Misc RPCs for DeFi Blockchain
 */
export declare class Misc {
    private readonly client;
    constructor(client: ApiClient);
    /**
     * To dynamically change the time for testing
     *
     * @param {number} ts Unix epoch in seconds
     * @return Promise<void>
     */
    setMockTime(ts: number): Promise<void>;
    /**
     * Verify a signed message
     *
     * @param {string} address DeFi address to use for this signature
     * @param {string} signature Base 63 encoded signature
     * @param {string} message The message that was signed
     * @return Promise<boolean> Is valid signature of the provided address
     */
    verifyMessage(address: string, signature: string, message: string): Promise<boolean>;
    /**
     * Sign a message with the private key of an address
     *
     * @param {string} privkey The private key to sign the message with
     * @param {string} message The message to create a signature of
     * @return Promise<string> The signature of the message encoded in base 64
     */
    signMessageWithPrivKey(privkey: string, message: string): Promise<string>;
    /**
     * Derives one or more addresses corresponding to an output descriptor.
     *
     * @param {string} descriptor The descriptor.
     * @param {number[]} range If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.
     * @return Promise<string[]> the derived addresses
     */
    deriveAddresses(descriptor: string, range?: number[]): Promise<string[]>;
}
//# sourceMappingURL=misc.d.ts.map