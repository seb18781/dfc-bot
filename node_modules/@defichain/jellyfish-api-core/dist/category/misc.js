"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Misc = void 0;
/**
 * Misc RPCs for DeFi Blockchain
 */
class Misc {
    constructor(client) {
        this.client = client;
    }
    /**
     * To dynamically change the time for testing
     *
     * @param {number} ts Unix epoch in seconds
     * @return Promise<void>
     */
    setMockTime(ts) {
        return __awaiter(this, void 0, void 0, function* () {
            const timestamp = ts.toString().length === 13 ? Math.floor(ts / 1e3) : ts;
            return yield this.client.call('setmocktime', [timestamp], 'number');
        });
    }
    /**
     * Verify a signed message
     *
     * @param {string} address DeFi address to use for this signature
     * @param {string} signature Base 63 encoded signature
     * @param {string} message The message that was signed
     * @return Promise<boolean> Is valid signature of the provided address
     */
    verifyMessage(address, signature, message) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('verifymessage', [address, signature, message], 'number');
        });
    }
    /**
     * Sign a message with the private key of an address
     *
     * @param {string} privkey The private key to sign the message with
     * @param {string} message The message to create a signature of
     * @return Promise<string> The signature of the message encoded in base 64
     */
    signMessageWithPrivKey(privkey, message) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('signmessagewithprivkey', [privkey, message], 'number');
        });
    }
    /**
     * Derives one or more addresses corresponding to an output descriptor.
     *
     * @param {string} descriptor The descriptor.
     * @param {number[]} range If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.
     * @return Promise<string[]> the derived addresses
     */
    deriveAddresses(descriptor, range) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.call('deriveaddresses', [descriptor, range].filter(x => x !== undefined), 'number');
        });
    }
}
exports.Misc = Misc;
//# sourceMappingURL=misc.js.map